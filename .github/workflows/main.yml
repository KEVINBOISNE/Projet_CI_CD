name: Python CI

on:
  push:
    branches:
      - main  # Cette action se déclenche sur les push dans la branche principale (ou prod)
  pull_request:
    branches:
      - main  # Ou toute autre branche vers la branche principale

jobs:
  # Job de test
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Upgrade pip
      run: |
        python -m pip install --upgrade pip  # Met à jour pip

    - name: Install dependencies
      run: |
        python -m venv venv  # Crée un environnement virtuel
        source venv/bin/activate  # Active l'environnement virtuel
        pip install -r requirements.txt  # Installe les dépendances depuis requirements.txt

    - name: Run tests
      run: |
        source venv/bin/activate  # Active l'environnement virtuel
        pytest  # Exécute les tests avec pytest

  # Job de déploiement
  deploy:
    runs-on: ubuntu-latest
    needs: test  # Le job de déploiement dépend du job de tests : il ne s'exécutera que si les tests sont réussis.

    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # S'assure que le déploiement ne se fait qu'après un push sur 'main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Déploiement de l'application
      run: |
        echo "Déploiement en cours..."
        # Exemple de mise à jour de l'application (copie de fichiers ou commande de déploiement)
        mkdir -p /deploy
        cp -r * /deploy/  # Simule la copie de fichiers vers un répertoire de déploiement
        echo "Déploiement terminé avec succès!"
        # Dans un vrai cas, cela pourrait être quelque chose comme : 
        # scp -r ./app user@server:/path/to/deploy

    - name: Confirmer le déploiement
      run: echo "L'application a été mise à jour avec succès!"
